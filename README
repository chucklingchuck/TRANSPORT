1D TRANSPORT V.1.1

Committed 1/29/14 to GITHUB (username: chucklingchuck)

Build instructions
------------------
The following libraries are needed:
-BLAS (http://www.netlib.org/blas/)
-LAPACK (http://www.netlib.org/lapack/)
-ARMADILLO (http://arma.sourceforge.net/download.html)
-HDF5 (http://www.hdfgroup.org/HDF5/release/obtain5.html)
-GFORTRAN (http://gcc.gnu.org/wiki/GFortran)
After installing the libraries:
1) Go into MAKEFILE and change the library paths as needed.
2) Run 'MAKE' to generate the executable 'TRANSPORT'
3) Run executable by typing './TRANSPORT' into the terminal.
4) The input file 'input_xml' must be in the same folder.
5) If desired, run the Matlab postprocessor 'post_proc.m' which reads in the generated HDF5 files.

V.1 (previous release)
----------------------
1) LDFE and LDFE-EQ angular quadratures.
2) Region definitions.
3) LDFE spatial discretization.
4) One-to-one mapping across region.
5) XML input parser.
6) HDF5 output of angular flux.

V.1.1 (previous release)
-----------------------
1) Fixed bug in LDFE angular quadratures.
2) Removed LDFE-EQ angular quadratures because the new LDFE angular quadratures are inherently equal-weighted.
3) Added isotopic and anisotropic scattering using source iteration.
4) Added external source option.
5) Added Matlab post-processor for calculating balance parameter.
6) HDF5 output of problem definitions required to calculate balance parameter.

V.2 (previous release)
---------------------
1) Added Matlab post-processor ability to plot selected angular flux across the problem domain.
2) Added Matlab post-processor ability to plot scalar moments across problem domain.
3) Added Matlab post-processor ability to plot angular flux at selected interfaces.

V.3 (previous release)
----------------------
1) Store quadrature and angular flux into binary trees for mapping and adaptivity.
2) Added a simple mapping method (i.e., angular averaging) to pass psi between regions with different quadrature orders.

V.4 (previous release)
---------------------
1) Added mapping conserving zeroth and first flux moments between LDFE angular regions across spatial interfaces.
2) Added linear fix-up preserving first flux moments across spatial interfaces.

V.5 (current release)
---------------------
1) Added an adaptive angular algorithm using jump-based error indicators (no coarsenment).

Plans for V.6
-------------
1) Investigate and test additional mapping, fixup and adaptive algorithms. 
Possible ideas for mapping:
-None at the moment.
Possible ideas for fixup:
-Try fixing up LDFE region-wise instead of by single directions.
-Try high to low-order interpolation schemes.
Possible ideas for adaptive algorithms:
-Projection-based error estimators
-Duality-based error estimators
2) Look at how coarsenment affects adaptive algorithm.

Plans for V.6+
--------------
1) Implement OpenMP to multi-thread sets of directions.
2) Investigate and add aggregation and scheduling methods minimizing solve times.

Notes
-----
We essentially have two choices if we want to extend these methods beyond 1D:
1) Go directly into PDT. 
2) Build an Sn code around the deal-ii FEM library. 
The advantages of the latter choice are:
1) Implementing different adaptive strategies MAY be easier with a self-written code.
2) Implementing different mapping and fixup schemes MAY be easier with a self-written code.
3) Gaining experience with deal-ii.
4) Gaining experience writing my own multi-dimensional Sn code.
The disadvantages of the latter choice are:
1) The methods will have to be implemented into PDT eventually anyway.
2) The code is self-written and therefore is not production level.
3) The code may not be as efficiently parallelizable as PDT therefore scaling studies may not be possible.
The best plan moving forward may be to test mapping, fixup and adaptive schemes using an Sn-deal-ii code then 
implementing those algorithms into PDT with Michael and Darryl's help. Scaling studies can then be done using 
those algorithms in STAPL-PDT.